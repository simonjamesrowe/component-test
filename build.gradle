plugins {
    id 'org.springframework.boot' version '2.5.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/simonjamesrowe/component-test"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

//build a normal jar and not a spring boot jar.
bootJar.enabled = false
jar.enabled = true
sourceCompatibility = '11'

group = 'com.simonjamesrowe'


ext {
    set('springCloudVersion', '2020.0.5')
}

dependencyManagement {
    imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" }
}

dependencies {
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    annotationProcessor('org.projectlombok:lombok')

    api('org.springframework.boot:spring-boot-starter-test')
    api('org.springframework.boot:spring-boot-starter-json')
    api('org.springframework.cloud:spring-cloud-contract-wiremock')
    api('org.springframework.security:spring-security-oauth2-jose')

    api("org.testcontainers:testcontainers:1.16.2")
    api("org.testcontainers:elasticsearch:1.16.2")

    api('org.apache.commons:commons-lang3:3.10')
    api('org.hibernate.validator:hibernate-validator:6.1.5.Final')
    api('org.testcontainers:vault:1.16.2')
    api('org.testcontainers:kafka:1.16.2')
    api('io.rest-assured:rest-assured:3.3.0')
    api('commons-io:commons-io:2.7')
    api('org.awaitility:awaitility:4.0.3')

    compileOnly('org.projectlombok:lombok')
    compileOnly('org.springframework.boot:spring-boot-starter-data-mongodb')
    compileOnly('org.springframework.kafka:spring-kafka')

    testImplementation('org.springframework.cloud:spring-cloud-starter-vault-config')
    testImplementation('org.springframework.kafka:spring-kafka')
    api("org.springframework.kafka:spring-kafka-test")
    api("net.jodah:failsafe:2.4.0")
    testImplementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    testImplementation('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    testImplementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-data-redis')
    testImplementation('org.springframework.boot:spring-boot-starter-data-jpa')
    testImplementation('org.postgresql:postgresql')
}


test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier('sources')
    from sourceSets.main.allSource
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test.finalizedBy jacocoTestReport

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.host.url", project.property("sonar.host.url") ?: ""
        property "sonar.login", project.property("sonar.login") ?: ""
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}
